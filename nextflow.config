manifest {
    homePage = 'http://github.com/edgano/'
    description = ''
    mainScript = 'main.nf'
}

process {
      container = 'edgano/homoplasy:latest'
}

// Global default params, used in configs
params {
    outdir = './results'
    email = 'edgano@gmail.com'
    email_on_fail = false
    tracedir = "${params.outdir}/pipeline_info"
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  crg { includeConfig 'conf/crg.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true 
           docker.scratch = true }
  singularity { singularity.enabled = true
                singularity.autoMounts = true }
  test { includeConfig 'conf/test.config' }
}
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
tower {
  accessToken = 'f11857c4ae7a82ddab1cd9fc9860bf15db63af86'
  enabled = true
}
// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, once this is established and works well, nextflow might implement this behavior as new default.
//docker.runOptions = '-u \$(id -u):\$(id -g)'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}